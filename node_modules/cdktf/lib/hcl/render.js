"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanForMetadata = cleanForMetadata;
exports.renderList = renderList;
exports.renderListValue = renderListValue;
exports.renderMap = renderMap;
exports.renderMapValue = renderMapValue;
exports.renderResource = renderResource;
exports.renderDatasource = renderDatasource;
exports.renderProvisionerBlock = renderProvisionerBlock;
exports.renderDynamicBlocks = renderDynamicBlocks;
exports.renderProvider = renderProvider;
exports.renderModule = renderModule;
exports.renderOutput = renderOutput;
exports.renderLocals = renderLocals;
exports.renderVariable = renderVariable;
exports.renderMoved = renderMoved;
exports.renderImport = renderImport;
exports.renderTerraform = renderTerraform;
exports.renderBlock = renderBlock;
exports.renderSimpleAttributes = renderSimpleAttributes;
exports.renderAttributes = renderAttributes;
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
const token_1 = require("../tokens/token");
/**
 *
 */
function escapeQuotes(str) {
    // Don't attempt to escape if we have an expression
    if (str.match(/\$\{/)) {
        return str;
    }
    return str.replace(/(?<!\\)"/g, '\\"');
}
/**
 *
 */
function wrapIdentifierInQuotesIfNeeded(key) {
    return /(^\d)|[^A-Za-z0-9_-]/.test(key) ? `"${key}"` : key;
}
/**
 *
 */
function renderString(str) {
    if (str === "") {
        return `""`;
    }
    if (!str) {
        return str;
    }
    if (typeof str !== "string") {
        throw new Error("Unable to process attribute that should have been a string, but isn't");
    }
    const lines = str.split(/\r\n|[\n\r]/);
    if (lines.length === 1)
        return `"${escapeQuotes(str)}"`;
    return `<<EOF\n${lines.map((s) => escapeQuotes(s)).join("\n")}\nEOF`;
}
/**
 *
 */
function cleanForMetadata(block) {
    const res = {};
    if (typeof block !== "object" && !Array.isArray(block)) {
        return block;
    }
    if (Array.isArray(block)) {
        return block.map((i) => cleanForMetadata(i));
    }
    const keys = Object.keys(block);
    if (keys.includes("value")) {
        return cleanForMetadata(block.value);
    }
    for (const key of keys) {
        const value = block[key];
        if (typeof value === "object" && value != null && !Array.isArray(value)) {
            // if the value is a resolvable we don't want to recurse into it
            if (token_1.Tokenization.isResolvable(value)) {
                res[key] = {};
                continue;
            }
            res[key] = cleanForMetadata(value);
            continue;
        }
        else if (typeof value === "object" &&
            value != null &&
            Array.isArray(value)) {
            if (Array.isArray(res[key])) {
                res[key] = [...res[key], ...value];
            }
            else {
                res[key] = value;
            }
        }
        else if (value === undefined) {
            delete res[key];
        }
        else {
            res[key] = value;
        }
    }
    return res;
}
/**
 *
 */
function renderList(v, name) {
    const { isBlock, is_block, value, storage_class_type, storageClassType } = v;
    const block = isBlock || is_block;
    const classType = storageClassType || storage_class_type;
    if (value === undefined) {
        return "";
    }
    if (typeof value === "string") {
        // this could be an expression, so we don't need to do anything here
        return renderString(value);
    }
    if (name) {
        if (block) {
            if (!Array.isArray(value)) {
                return `${name} {` + `\n${renderAttributes(value)}\n}`;
            }
            return value
                .map((v) => {
                return `${name} {` + `\n${renderAttributes(v)}\n}`;
            })
                .join("\n");
        }
        if (!Array.isArray(value)) {
            return `${name} = ${renderListValue(value, classType)}`;
        }
        return `${name} = [
${value.map((v) => renderListValue(v, classType)).join(",\n")}
]`;
    }
    if (!Array.isArray(value)) {
        // A list type of only a single item
        return renderListValue(value, classType);
    }
    if (block) {
        return value.map((v) => renderListValue(v, classType)).join("\n");
    }
    return `[
${value.map((v) => renderListValue(v, classType)).join(",\n")}
]`;
}
/**
 *
 */
function renderListValue(value, storageClassType) {
    if (storageClassType === "stringList") {
        return renderString(value);
    }
    if (storageClassType === "numberList" || storageClassType === "booleanList") {
        return `${value}`;
    }
    return renderBlock(value, storageClassType);
}
/**
 *
 */
function renderMap(map) {
    if (typeof map === "string") {
        // this could be an expression, so we don't need to do anything here
        return `"${escapeQuotes(map)}"`;
    }
    return `{
${Object.entries(map)
        .map(([k, v]) => {
        const wrappedKey = wrapIdentifierInQuotesIfNeeded(k);
        return `${wrappedKey} = ${renderMapValue(v)}`;
    })
        .join("\n")}
}`;
}
/**
 *
 */
function renderMapValue(value) {
    if (typeof value === "string") {
        return renderString(value);
    }
    if (typeof value === "number") {
        return `${value}`;
    }
    if (typeof value === "boolean") {
        return `${value}`;
    }
    if (typeof value === "object") {
        if (Array.isArray(value)) {
            return renderListValue(value, "unknownStorageClass");
        }
        if (value === null) {
            return "null";
        }
        return renderMap(value);
    }
    return `${value}`;
}
/**
 *
 */
function renderResource(resource) {
    const resourceType = Object.keys(resource)[0];
    const resourcesWithType = resource[resourceType];
    const resourceName = Object.keys(resourcesWithType)[0];
    const resourceAttributes = resourcesWithType[resourceName];
    if (resourceAttributes.connection) {
        resourceAttributes.connection = {
            value: resourceAttributes.connection,
            isBlock: true,
        };
    }
    const { provisioner, dynamic, ...otherAttrs } = resourceAttributes;
    const hcl = [`resource "${resourceType}" "${resourceName}" {`];
    const attrs = renderAttributes(otherAttrs);
    if (attrs)
        hcl.push(attrs);
    if (provisioner)
        hcl.push(renderProvisionerBlock(provisioner));
    if (dynamic)
        hcl.push(...renderDynamicBlocks(dynamic));
    hcl.push("}");
    return {
        hcl: hcl.join("\n"),
        metadata: {
            resource: {
                [resourceType]: {
                    [resourceName]: {
                        "//": resourceAttributes["//"],
                    },
                },
            },
        },
    };
}
/**
 *
 */
function renderDatasource(dataSource) {
    const dataSourceType = Object.keys(dataSource)[0];
    const dataSourcesWithType = dataSource[dataSourceType];
    const dataSourceName = Object.keys(dataSourcesWithType)[0];
    const dataSourceAttributes = dataSourcesWithType[dataSourceName];
    const { dynamic, ...otherAttrs } = dataSourceAttributes;
    const hcl = [`data "${dataSourceType}" "${dataSourceName}" {`];
    const attrs = renderAttributes(otherAttrs);
    if (attrs)
        hcl.push(attrs);
    if (dynamic)
        hcl.push(...renderDynamicBlocks(dynamic));
    hcl.push("}");
    return {
        hcl: hcl.join("\n"),
        metadata: {
            data: {
                [dataSourceType]: {
                    [dataSourceName]: {
                        "//": dataSourceAttributes["//"],
                    },
                },
            },
        },
    };
}
/**
 *
 */
function renderProvisionerBlock(provisioners) {
    return provisioners
        .map((provisioner) => {
        const provisionerType = Object.keys(provisioner)[0];
        const provisionerAttrs = provisioner[provisionerType];
        if (provisionerAttrs.connection) {
            provisionerAttrs.connection = {
                value: provisionerAttrs.connection,
                isBlock: true,
            };
        }
        const { dynamic, ...otherAttrs } = provisionerAttrs;
        const hcl = [`provisioner "${provisionerType}" {`];
        const attrs = renderAttributes(otherAttrs.value || otherAttrs);
        if (attrs)
            hcl.push(attrs);
        if (dynamic)
            hcl.push(...renderDynamicBlocks(dynamic));
        hcl.push("}");
        return hcl.join("\n");
    })
        .join("\n\n");
}
/**
 *
 */
function renderDynamicBlocks(dynamic) {
    return Object.entries(dynamic).map(([dynamicName, dynamicAttrs]) => {
        const res = [`dynamic "${dynamicName}" {`];
        res.push(`for_each = ${renderFuzzyJsonExpression(dynamicAttrs?.for_each)}`);
        if (dynamicAttrs?.iterator) {
            res.push(`iterator = ${dynamicAttrs?.iterator}`);
        }
        if (dynamicAttrs?.labels) {
            res.push(`labels = ${renderFuzzyJsonExpression(dynamicAttrs?.labels)}`);
        }
        res.push(`content {
  ${renderAttributes(dynamicAttrs.content)}
  }`);
        res.push(`}`);
        return res.join("\n");
    });
}
/**
 *
 */
function renderProvider(provider) {
    const providerName = Object.keys(provider)[0];
    const providerAttributes = provider[providerName];
    return providerAttributes
        .map((providerInstance) => {
        const { dynamic, ...otherAttrs } = providerInstance;
        const hcl = [`provider "${providerName}" {`];
        const attrs = renderAttributes(otherAttrs);
        if (attrs)
            hcl.push(attrs);
        if (dynamic)
            hcl.push(...renderDynamicBlocks(dynamic));
        hcl.push("}");
        return hcl.join("\n");
    })
        .join("\n\n");
}
/**
 *
 */
function renderModule(module) {
    const moduleName = Object.keys(module)[0];
    const moduleAttributes = module[moduleName];
    return {
        hcl: `module "${moduleName}" {
${renderAttributes(moduleAttributes)}
}`,
        metadata: {
            module: {
                [moduleName]: {
                    "//": moduleAttributes["//"],
                },
            },
        },
    };
}
/**
 *
 */
function renderOutput(output) {
    const outputName = Object.keys(output)[0];
    const outputAttributes = output[outputName];
    return `output "${outputName}" {
${renderAttributes(outputAttributes)}
}`;
}
/**
 *
 */
function renderLocals(locals) {
    if (!locals) {
        return "";
    }
    const localNames = Object.keys(locals);
    if (localNames.length === 0) {
        return "";
    }
    return `locals {
    ${localNames
        .filter((name) => !!locals[name].value)
        .map((name) => {
        const value = renderFuzzyJsonExpression(locals[name].value);
        return `${name} = ${value}`;
    })
        .join("\n")}
}`;
}
/**
 *
 */
function renderVariable(variable) {
    const variableName = Object.keys(variable)[0];
    const variableAttributes = variable[variableName];
    return `variable "${variableName}" {
${renderAttributes(variableAttributes)}
}`;
}
/**
 *
 */
function renderMoved(move) {
    const movedBlocks = move.map((moveBlock) => {
        return `moved {
${renderAttributes(moveBlock)}
}`;
    });
    return movedBlocks.join("\n");
}
/**
 *
 */
function renderImport(imports) {
    const importBlocks = imports.map((importBlock) => {
        return `import {
${renderAttributes(importBlock)}
}`;
    });
    return importBlocks.join("\n");
}
/**
 *
 */
function renderTerraform(terraform) {
    const blockAttributes = ["required_providers", "backend", "cloud"];
    const requiredProviders = `required_providers {
${renderSimpleAttributes(terraform.required_providers)}
}`;
    const backends = Object.keys(terraform.backend || {}).map((backendName) => {
        return `backend "${backendName}" {
${renderAttributes(terraform.backend[backendName])}
}`;
    });
    const cloudBackend = terraform.cloud
        ? `cloud {
${renderAttributes(terraform.cloud)}
}`
        : undefined;
    const otherAttributes = Object.keys(terraform).filter((key) => !blockAttributes.includes(key));
    return `terraform {
${requiredProviders}
${[...backends, cloudBackend].join("\n")}
${renderSimpleAttributes(otherAttributes)}
}`;
}
/**
 *
 */
function renderBlock(block, _storageClassType) {
    return `{
${renderAttributes(block)}
}`;
}
/**
 *
 */
function renderFuzzyJsonObject(jsonObject) {
    return [
        "{",
        ...Object.entries(jsonObject).map(([name, value]) => {
            const wrappedKey = wrapIdentifierInQuotesIfNeeded(name);
            return `${wrappedKey} = ${renderFuzzyJsonExpression(value)}`;
        }),
        "}",
    ].join("\n");
}
/**
 *
 */
function renderFuzzyJsonExpression(jsonExpression) {
    if (Array.isArray(jsonExpression)) {
        return [
            "[",
            ...jsonExpression.map((value) => `${renderFuzzyJsonExpression(value)},`),
            "]",
        ].join("\n");
    }
    if (typeof jsonExpression === "object") {
        return renderFuzzyJsonObject(jsonExpression);
    }
    if (typeof jsonExpression === "string") {
        if (jsonExpression === "") {
            return `""`;
        }
        if (jsonExpression.includes("${")) {
            return `"${jsonExpression}"`;
        }
        if (parseInt(jsonExpression, 10).toString() === jsonExpression) {
            return jsonExpression;
        }
        if (jsonExpression.startsWith("[")) {
            return jsonExpression;
        }
        if (jsonExpression.startsWith("{")) {
            return jsonExpression;
        }
        if (jsonExpression.startsWith('"')) {
            return jsonExpression;
        }
        return `"${escapeQuotes(jsonExpression)}"`;
    }
    if (jsonExpression === "true" || jsonExpression === "false") {
        return jsonExpression;
    }
    if (jsonExpression === "null") {
        return jsonExpression;
    }
    return `${jsonExpression}`;
}
/**
 *
 */
function renderSimpleAttributes(attributes) {
    if (attributes === undefined) {
        return "";
    }
    return Object.entries(attributes)
        .map(([name, value]) => `  ${name} = ${renderFuzzyJsonExpression(value)}`)
        .join("\n");
}
/**
 *
 */
function renderAttributes(attributes) {
    if (attributes === undefined || attributes === null) {
        return "";
    }
    return Object.entries(attributes)
        .map(([name, v]) => {
        if (name === "//") {
            return undefined;
        }
        const metaBlocks = ["lifecycle", "provisioner"];
        //
        // We might have some attributes that don't have type information
        // just try to guess them
        if (typeof v === "string" || typeof v === "number") {
            return `${name} = ${renderFuzzyJsonExpression(v)}`;
        }
        else if (typeof v === "boolean") {
            return `${name} = ${v}`;
        }
        else if (Array.isArray(v)) {
            return `${name} = ${renderFuzzyJsonExpression(v)}`;
        }
        else if (v === null) {
            return `${name} = null`;
        }
        else if (typeof v === "object" &&
            // eslint-disable-next-line no-prototype-builtins
            !v.hasOwnProperty("value") &&
            // eslint-disable-next-line no-prototype-builtins
            !v.hasOwnProperty("dynamic")) {
            if (metaBlocks.includes(name)) {
                return `${name} {
${renderSimpleAttributes(v)}
}`;
            }
            return `${name} = ${renderFuzzyJsonExpression(v)}`;
        }
        else if (v === undefined) {
            return undefined;
        }
        // Referencing both isBlock and is_block, because sometimes we pass through a snake case filter
        // within attributes.
        const { dynamic, value, type, isBlock, storageClassType, is_block, storage_class_type, } = v;
        const block = isBlock || is_block || metaBlocks.includes(name);
        const classType = storageClassType || storage_class_type;
        if (dynamic) {
            return renderDynamicBlocks({
                [name]: dynamic.value,
            });
        }
        // Short circuit type checking if value is an expression
        if (typeof value === "string" && value.includes("${")) {
            return `${name} = ${renderString(value)}`;
        }
        if (block && type !== "list" && type !== "set") {
            return `${name} {
${renderAttributes(value)}
}`;
        }
        if (type === "list" || type === "set") {
            if (block) {
                return renderList(v, name);
            }
            return `${name} = ${renderList(v)}`;
        }
        if (type === "map") {
            return `${name} = ${renderMap(value)}`;
        }
        if (type === "simple") {
            if (classType === "string") {
                return `${name} = ${renderString(value)}`;
            }
            if (classType === "number" || classType === "boolean") {
                return `${name} = ${value}`;
            }
        }
        if (type === "any") {
            return `${name} = ${renderFuzzyJsonExpression(value)}`;
        }
        if (type === "reference") {
            return `${name} = ${value}`;
        }
        return `${name} = ${value}`;
    })
        .filter((v) => v !== undefined)
        .join("\n");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVuZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBb0RBLDRDQTZDQztBQUtELGdDQWdEQztBQUtELDBDQVNDO0FBS0QsOEJBY0M7QUFLRCx3Q0FzQkM7QUFLRCx3Q0FxQ0M7QUFLRCw0Q0EyQkM7QUFLRCx3REF5QkM7QUFLRCxrREFxQkM7QUFLRCx3Q0FtQkM7QUFLRCxvQ0FnQkM7QUFLRCxvQ0FPQztBQUtELG9DQW9CQztBQUtELHdDQU9DO0FBS0Qsa0NBUUM7QUFLRCxvQ0FRQztBQUtELDBDQTBCQztBQUtELGtDQUlDO0FBeUVELHdEQVdDO0FBSUQsNENBbUdDO0FBL3FCRDs7O0dBR0c7QUFDSCwyQ0FBK0M7QUFFL0M7O0dBRUc7QUFDSCxTQUFTLFlBQVksQ0FBQyxHQUFXO0lBQy9CLG1EQUFtRDtJQUNuRCxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUN0QixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFDRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQVMsOEJBQThCLENBQUMsR0FBVztJQUNqRCxPQUFPLHNCQUFzQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzdELENBQUM7QUFFRDs7R0FFRztBQUNILFNBQVMsWUFBWSxDQUFDLEdBQVc7SUFDL0IsSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFFLENBQUM7UUFDZixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDVCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRSxD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O1lBQzVDLENBQUM7WUFDRCxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRSxDQUFDO2dCQUN0RCxPQUFPLEdBQUcsSUFBSSxNQUFNLEtBQUssRUFBRSxDQUFDO1lBQzlCLENBQUM7UUFDSCxDQUFDO1FBRUQsSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFLENBQUM7WUFDbkIsT0FBTyxHQUFHLElBQUksTUFBTSx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3pELENBQUM7UUFFRCxJQUFJLElBQUksS0FBSyxXQUFXLEVBQUUsQ0FBQztZQUN6QixPQUFPLEdBQUcsSUFBSSxNQUFNLEtBQUssRUFBRSxDQUFDO1FBQzlCLENBQUM7UUFFRCxPQUFPLEdBQUcsSUFBSSxNQUFNLEtBQUssRUFBRSxDQUFDO0lBQzlCLENBQUMsQ0FBQztTQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQztTQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluYy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG4gKi9cbmltcG9ydCB7IFRva2VuaXphdGlvbiB9IGZyb20gXCIuLi90b2tlbnMvdG9rZW5cIjtcblxuLyoqXG4gKlxuICovXG5mdW5jdGlvbiBlc2NhcGVRdW90ZXMoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyBEb24ndCBhdHRlbXB0IHRvIGVzY2FwZSBpZiB3ZSBoYXZlIGFuIGV4cHJlc3Npb25cbiAgaWYgKHN0ci5tYXRjaCgvXFwkXFx7LykpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKD88IVxcXFwpXCIvZywgJ1xcXFxcIicpO1xufVxuXG4vKipcbiAqXG4gKi9cbmZ1bmN0aW9uIHdyYXBJZGVudGlmaWVySW5RdW90ZXNJZk5lZWRlZChrZXk6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiAvKF5cXGQpfFteQS1aYS16MC05Xy1dLy50ZXN0KGtleSkgPyBgXCIke2tleX1cImAgOiBrZXk7XG59XG5cbi8qKlxuICpcbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RyaW5nKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKHN0ciA9PT0gXCJcIikge1xuICAgIHJldHVybiBgXCJcImA7XG4gIH1cblxuICBpZiAoIXN0cikge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVW5hYmxlIHRvIHByb2Nlc3MgYXR0cmlidXRlIHRoYXQgc2hvdWxkIGhhdmUgYmVlbiBhIHN0cmluZywgYnV0IGlzbid0XCIsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGxpbmVzID0gc3RyLnNwbGl0KC9cXHJcXG58W1xcblxccl0vKTtcblxuICBpZiAobGluZXMubGVuZ3RoID09PSAxKSByZXR1cm4gYFwiJHtlc2NhcGVRdW90ZXMoc3RyKX1cImA7XG5cbiAgcmV0dXJuIGA8PEVPRlxcbiR7bGluZXMubWFwKChzKSA9PiBlc2NhcGVRdW90ZXMocykpLmpvaW4oXCJcXG5cIil9XFxuRU9GYDtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYW5Gb3JNZXRhZGF0YShibG9jazogYW55KTogYW55IHtcbiAgY29uc3QgcmVzOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuXG4gIGlmICh0eXBlb2YgYmxvY2sgIT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoYmxvY2spKSB7XG4gICAgcmV0dXJuIGJsb2NrO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYmxvY2spKSB7XG4gICAgcmV0dXJuIGJsb2NrLm1hcCgoaSkgPT4gY2xlYW5Gb3JNZXRhZGF0YShpKSk7XG4gIH1cblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYmxvY2spO1xuXG4gIGlmIChrZXlzLmluY2x1ZGVzKFwidmFsdWVcIikpIHtcbiAgICByZXR1cm4gY2xlYW5Gb3JNZXRhZGF0YShibG9jay52YWx1ZSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgY29uc3QgdmFsdWUgPSBibG9ja1trZXldO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBhIHJlc29sdmFibGUgd2UgZG9uJ3Qgd2FudCB0byByZWN1cnNlIGludG8gaXRcbiAgICAgIGlmIChUb2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHZhbHVlKSkge1xuICAgICAgICByZXNba2V5XSA9IHt9O1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmVzW2tleV0gPSBjbGVhbkZvck1ldGFkYXRhKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIHZhbHVlICE9IG51bGwgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpXG4gICAgKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXNba2V5XSkpIHtcbiAgICAgICAgcmVzW2tleV0gPSBbLi4ucmVzW2tleV0sIC4uLnZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWxldGUgcmVzW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckxpc3QodjogYW55LCBuYW1lPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgeyBpc0Jsb2NrLCBpc19ibG9jaywgdmFsdWUsIHN0b3JhZ2VfY2xhc3NfdHlwZSwgc3RvcmFnZUNsYXNzVHlwZSB9ID0gdjtcbiAgY29uc3QgYmxvY2sgPSBpc0Jsb2NrIHx8IGlzX2Jsb2NrO1xuICBjb25zdCBjbGFzc1R5cGUgPSBzdG9yYWdlQ2xhc3NUeXBlIHx8IHN0b3JhZ2VfY2xhc3NfdHlwZTtcblxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIC8vIHRoaXMgY291bGQgYmUgYW4gZXhwcmVzc2lvbiwgc28gd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBoZXJlXG4gICAgcmV0dXJuIHJlbmRlclN0cmluZyh2YWx1ZSk7XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGlmIChibG9jaykge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0ge2AgKyBgXFxuJHtyZW5kZXJBdHRyaWJ1dGVzKHZhbHVlKX1cXG59YDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgIC5tYXAoKHY6IGFueSkgPT4ge1xuICAgICAgICAgIHJldHVybiBgJHtuYW1lfSB7YCArIGBcXG4ke3JlbmRlckF0dHJpYnV0ZXModil9XFxufWA7XG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7cmVuZGVyTGlzdFZhbHVlKHZhbHVlLCBjbGFzc1R5cGUpfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke25hbWV9ID0gW1xuJHt2YWx1ZS5tYXAoKHY6IGFueSkgPT4gcmVuZGVyTGlzdFZhbHVlKHYsIGNsYXNzVHlwZSkpLmpvaW4oXCIsXFxuXCIpfVxuXWA7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gQSBsaXN0IHR5cGUgb2Ygb25seSBhIHNpbmdsZSBpdGVtXG4gICAgcmV0dXJuIHJlbmRlckxpc3RWYWx1ZSh2YWx1ZSwgY2xhc3NUeXBlKTtcbiAgfVxuXG4gIGlmIChibG9jaykge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoKHY6IGFueSkgPT4gcmVuZGVyTGlzdFZhbHVlKHYsIGNsYXNzVHlwZSkpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gYFtcbiR7dmFsdWUubWFwKCh2OiBhbnkpID0+IHJlbmRlckxpc3RWYWx1ZSh2LCBjbGFzc1R5cGUpKS5qb2luKFwiLFxcblwiKX1cbl1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJMaXN0VmFsdWUodmFsdWU6IGFueSwgc3RvcmFnZUNsYXNzVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKHN0b3JhZ2VDbGFzc1R5cGUgPT09IFwic3RyaW5nTGlzdFwiKSB7XG4gICAgcmV0dXJuIHJlbmRlclN0cmluZyh2YWx1ZSk7XG4gIH1cbiAgaWYgKHN0b3JhZ2VDbGFzc1R5cGUgPT09IFwibnVtYmVyTGlzdFwiIHx8IHN0b3JhZ2VDbGFzc1R5cGUgPT09IFwiYm9vbGVhbkxpc3RcIikge1xuICAgIHJldHVybiBgJHt2YWx1ZX1gO1xuICB9XG5cbiAgcmV0dXJuIHJlbmRlckJsb2NrKHZhbHVlLCBzdG9yYWdlQ2xhc3NUeXBlKTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyTWFwKG1hcDogYW55KTogc3RyaW5nIHtcbiAgaWYgKHR5cGVvZiBtYXAgPT09IFwic3RyaW5nXCIpIHtcbiAgICAvLyB0aGlzIGNvdWxkIGJlIGFuIGV4cHJlc3Npb24sIHNvIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgaGVyZVxuICAgIHJldHVybiBgXCIke2VzY2FwZVF1b3RlcyhtYXApfVwiYDtcbiAgfVxuICByZXR1cm4gYHtcbiR7T2JqZWN0LmVudHJpZXMobWFwKVxuICAubWFwKChbaywgdl0pID0+IHtcbiAgICBjb25zdCB3cmFwcGVkS2V5ID0gd3JhcElkZW50aWZpZXJJblF1b3Rlc0lmTmVlZGVkKGspO1xuXG4gICAgcmV0dXJuIGAke3dyYXBwZWRLZXl9ID0gJHtyZW5kZXJNYXBWYWx1ZSh2KX1gO1xuICB9KVxuICAuam9pbihcIlxcblwiKX1cbn1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJNYXBWYWx1ZSh2YWx1ZTogYW55KTogc3RyaW5nIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiByZW5kZXJTdHJpbmcodmFsdWUpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9YDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgIHJldHVybiBgJHt2YWx1ZX1gO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHJlbmRlckxpc3RWYWx1ZSh2YWx1ZSwgXCJ1bmtub3duU3RvcmFnZUNsYXNzXCIpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlck1hcCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gYCR7dmFsdWV9YDtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyUmVzb3VyY2UocmVzb3VyY2U6IGFueSkge1xuICBjb25zdCByZXNvdXJjZVR5cGUgPSBPYmplY3Qua2V5cyhyZXNvdXJjZSlbMF07XG4gIGNvbnN0IHJlc291cmNlc1dpdGhUeXBlID0gcmVzb3VyY2VbcmVzb3VyY2VUeXBlXTtcbiAgY29uc3QgcmVzb3VyY2VOYW1lID0gT2JqZWN0LmtleXMocmVzb3VyY2VzV2l0aFR5cGUpWzBdO1xuICBjb25zdCByZXNvdXJjZUF0dHJpYnV0ZXMgPSByZXNvdXJjZXNXaXRoVHlwZVtyZXNvdXJjZU5hbWVdO1xuXG4gIGlmIChyZXNvdXJjZUF0dHJpYnV0ZXMuY29ubmVjdGlvbikge1xuICAgIHJlc291cmNlQXR0cmlidXRlcy5jb25uZWN0aW9uID0ge1xuICAgICAgdmFsdWU6IHJlc291cmNlQXR0cmlidXRlcy5jb25uZWN0aW9uLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgeyBwcm92aXNpb25lciwgZHluYW1pYywgLi4ub3RoZXJBdHRycyB9ID0gcmVzb3VyY2VBdHRyaWJ1dGVzO1xuXG4gIGNvbnN0IGhjbCA9IFtgcmVzb3VyY2UgXCIke3Jlc291cmNlVHlwZX1cIiBcIiR7cmVzb3VyY2VOYW1lfVwiIHtgXTtcblxuICBjb25zdCBhdHRycyA9IHJlbmRlckF0dHJpYnV0ZXMob3RoZXJBdHRycyk7XG5cbiAgaWYgKGF0dHJzKSBoY2wucHVzaChhdHRycyk7XG4gIGlmIChwcm92aXNpb25lcikgaGNsLnB1c2gocmVuZGVyUHJvdmlzaW9uZXJCbG9jayhwcm92aXNpb25lcikpO1xuICBpZiAoZHluYW1pYykgaGNsLnB1c2goLi4ucmVuZGVyRHluYW1pY0Jsb2NrcyhkeW5hbWljKSk7XG5cbiAgaGNsLnB1c2goXCJ9XCIpO1xuXG4gIHJldHVybiB7XG4gICAgaGNsOiBoY2wuam9pbihcIlxcblwiKSxcbiAgICBtZXRhZGF0YToge1xuICAgICAgcmVzb3VyY2U6IHtcbiAgICAgICAgW3Jlc291cmNlVHlwZV06IHtcbiAgICAgICAgICBbcmVzb3VyY2VOYW1lXToge1xuICAgICAgICAgICAgXCIvL1wiOiByZXNvdXJjZUF0dHJpYnV0ZXNbXCIvL1wiXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJEYXRhc291cmNlKGRhdGFTb3VyY2U6IGFueSkge1xuICBjb25zdCBkYXRhU291cmNlVHlwZSA9IE9iamVjdC5rZXlzKGRhdGFTb3VyY2UpWzBdO1xuICBjb25zdCBkYXRhU291cmNlc1dpdGhUeXBlID0gZGF0YVNvdXJjZVtkYXRhU291cmNlVHlwZV07XG4gIGNvbnN0IGRhdGFTb3VyY2VOYW1lID0gT2JqZWN0LmtleXMoZGF0YVNvdXJjZXNXaXRoVHlwZSlbMF07XG4gIGNvbnN0IGRhdGFTb3VyY2VBdHRyaWJ1dGVzID0gZGF0YVNvdXJjZXNXaXRoVHlwZVtkYXRhU291cmNlTmFtZV07XG5cbiAgY29uc3QgeyBkeW5hbWljLCAuLi5vdGhlckF0dHJzIH0gPSBkYXRhU291cmNlQXR0cmlidXRlcztcblxuICBjb25zdCBoY2wgPSBbYGRhdGEgXCIke2RhdGFTb3VyY2VUeXBlfVwiIFwiJHtkYXRhU291cmNlTmFtZX1cIiB7YF07XG5cbiAgY29uc3QgYXR0cnMgPSByZW5kZXJBdHRyaWJ1dGVzKG90aGVyQXR0cnMpO1xuICBpZiAoYXR0cnMpIGhjbC5wdXNoKGF0dHJzKTtcbiAgaWYgKGR5bmFtaWMpIGhjbC5wdXNoKC4uLnJlbmRlckR5bmFtaWNCbG9ja3MoZHluYW1pYykpO1xuICBoY2wucHVzaChcIn1cIik7XG5cbiAgcmV0dXJuIHtcbiAgICBoY2w6IGhjbC5qb2luKFwiXFxuXCIpLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIFtkYXRhU291cmNlVHlwZV06IHtcbiAgICAgICAgICBbZGF0YVNvdXJjZU5hbWVdOiB7XG4gICAgICAgICAgICBcIi8vXCI6IGRhdGFTb3VyY2VBdHRyaWJ1dGVzW1wiLy9cIl0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyUHJvdmlzaW9uZXJCbG9jayhwcm92aXNpb25lcnM6IGFueSkge1xuICByZXR1cm4gcHJvdmlzaW9uZXJzXG4gICAgLm1hcCgocHJvdmlzaW9uZXI6IGFueSkgPT4ge1xuICAgICAgY29uc3QgcHJvdmlzaW9uZXJUeXBlID0gT2JqZWN0LmtleXMocHJvdmlzaW9uZXIpWzBdO1xuICAgICAgY29uc3QgcHJvdmlzaW9uZXJBdHRycyA9IHByb3Zpc2lvbmVyW3Byb3Zpc2lvbmVyVHlwZV07XG5cbiAgICAgIGlmIChwcm92aXNpb25lckF0dHJzLmNvbm5lY3Rpb24pIHtcbiAgICAgICAgcHJvdmlzaW9uZXJBdHRycy5jb25uZWN0aW9uID0ge1xuICAgICAgICAgIHZhbHVlOiBwcm92aXNpb25lckF0dHJzLmNvbm5lY3Rpb24sXG4gICAgICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBkeW5hbWljLCAuLi5vdGhlckF0dHJzIH0gPSBwcm92aXNpb25lckF0dHJzO1xuXG4gICAgICBjb25zdCBoY2wgPSBbYHByb3Zpc2lvbmVyIFwiJHtwcm92aXNpb25lclR5cGV9XCIge2BdO1xuXG4gICAgICBjb25zdCBhdHRycyA9IHJlbmRlckF0dHJpYnV0ZXMob3RoZXJBdHRycy52YWx1ZSB8fCBvdGhlckF0dHJzKTtcbiAgICAgIGlmIChhdHRycykgaGNsLnB1c2goYXR0cnMpO1xuICAgICAgaWYgKGR5bmFtaWMpIGhjbC5wdXNoKC4uLnJlbmRlckR5bmFtaWNCbG9ja3MoZHluYW1pYykpO1xuICAgICAgaGNsLnB1c2goXCJ9XCIpO1xuXG4gICAgICByZXR1cm4gaGNsLmpvaW4oXCJcXG5cIik7XG4gICAgfSlcbiAgICAuam9pbihcIlxcblxcblwiKTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyRHluYW1pY0Jsb2NrcyhkeW5hbWljOiBhbnkpIHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGR5bmFtaWMpLm1hcChcbiAgICAoW2R5bmFtaWNOYW1lLCBkeW5hbWljQXR0cnNdOiBbc3RyaW5nLCBhbnldKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSBbYGR5bmFtaWMgXCIke2R5bmFtaWNOYW1lfVwiIHtgXTtcbiAgICAgIHJlcy5wdXNoKFxuICAgICAgICBgZm9yX2VhY2ggPSAke3JlbmRlckZ1enp5SnNvbkV4cHJlc3Npb24oZHluYW1pY0F0dHJzPy5mb3JfZWFjaCl9YCxcbiAgICAgICk7XG4gICAgICBpZiAoZHluYW1pY0F0dHJzPy5pdGVyYXRvcikge1xuICAgICAgICByZXMucHVzaChgaXRlcmF0b3IgPSAke2R5bmFtaWNBdHRycz8uaXRlcmF0b3J9YCk7XG4gICAgICB9XG4gICAgICBpZiAoZHluYW1pY0F0dHJzPy5sYWJlbHMpIHtcbiAgICAgICAgcmVzLnB1c2goYGxhYmVscyA9ICR7cmVuZGVyRnV6enlKc29uRXhwcmVzc2lvbihkeW5hbWljQXR0cnM/LmxhYmVscyl9YCk7XG4gICAgICB9XG4gICAgICByZXMucHVzaChgY29udGVudCB7XG4gICR7cmVuZGVyQXR0cmlidXRlcyhkeW5hbWljQXR0cnMuY29udGVudCl9XG4gIH1gKTtcbiAgICAgIHJlcy5wdXNoKGB9YCk7XG5cbiAgICAgIHJldHVybiByZXMuam9pbihcIlxcblwiKTtcbiAgICB9LFxuICApO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJQcm92aWRlcihwcm92aWRlcjogYW55KSB7XG4gIGNvbnN0IHByb3ZpZGVyTmFtZSA9IE9iamVjdC5rZXlzKHByb3ZpZGVyKVswXTtcbiAgY29uc3QgcHJvdmlkZXJBdHRyaWJ1dGVzID0gcHJvdmlkZXJbcHJvdmlkZXJOYW1lXTtcblxuICByZXR1cm4gcHJvdmlkZXJBdHRyaWJ1dGVzXG4gICAgLm1hcCgocHJvdmlkZXJJbnN0YW5jZTogYW55KSA9PiB7XG4gICAgICBjb25zdCB7IGR5bmFtaWMsIC4uLm90aGVyQXR0cnMgfSA9IHByb3ZpZGVySW5zdGFuY2U7XG5cbiAgICAgIGNvbnN0IGhjbCA9IFtgcHJvdmlkZXIgXCIke3Byb3ZpZGVyTmFtZX1cIiB7YF07XG5cbiAgICAgIGNvbnN0IGF0dHJzID0gcmVuZGVyQXR0cmlidXRlcyhvdGhlckF0dHJzKTtcbiAgICAgIGlmIChhdHRycykgaGNsLnB1c2goYXR0cnMpO1xuICAgICAgaWYgKGR5bmFtaWMpIGhjbC5wdXNoKC4uLnJlbmRlckR5bmFtaWNCbG9ja3MoZHluYW1pYykpO1xuXG4gICAgICBoY2wucHVzaChcIn1cIik7XG5cbiAgICAgIHJldHVybiBoY2wuam9pbihcIlxcblwiKTtcbiAgICB9KVxuICAgIC5qb2luKFwiXFxuXFxuXCIpO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJNb2R1bGUobW9kdWxlOiBhbnkpIHtcbiAgY29uc3QgbW9kdWxlTmFtZSA9IE9iamVjdC5rZXlzKG1vZHVsZSlbMF07XG4gIGNvbnN0IG1vZHVsZUF0dHJpYnV0ZXMgPSBtb2R1bGVbbW9kdWxlTmFtZV07XG5cbiAgcmV0dXJuIHtcbiAgICBoY2w6IGBtb2R1bGUgXCIke21vZHVsZU5hbWV9XCIge1xuJHtyZW5kZXJBdHRyaWJ1dGVzKG1vZHVsZUF0dHJpYnV0ZXMpfVxufWAsXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIG1vZHVsZToge1xuICAgICAgICBbbW9kdWxlTmFtZV06IHtcbiAgICAgICAgICBcIi8vXCI6IG1vZHVsZUF0dHJpYnV0ZXNbXCIvL1wiXSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyT3V0cHV0KG91dHB1dDogYW55KSB7XG4gIGNvbnN0IG91dHB1dE5hbWUgPSBPYmplY3Qua2V5cyhvdXRwdXQpWzBdO1xuICBjb25zdCBvdXRwdXRBdHRyaWJ1dGVzID0gb3V0cHV0W291dHB1dE5hbWVdO1xuXG4gIHJldHVybiBgb3V0cHV0IFwiJHtvdXRwdXROYW1lfVwiIHtcbiR7cmVuZGVyQXR0cmlidXRlcyhvdXRwdXRBdHRyaWJ1dGVzKX1cbn1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJMb2NhbHMobG9jYWxzOiBhbnkpIHtcbiAgaWYgKCFsb2NhbHMpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIGNvbnN0IGxvY2FsTmFtZXMgPSBPYmplY3Qua2V5cyhsb2NhbHMpO1xuXG4gIGlmIChsb2NhbE5hbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIGBsb2NhbHMge1xuICAgICR7bG9jYWxOYW1lc1xuICAgICAgLmZpbHRlcigobmFtZSkgPT4gISFsb2NhbHNbbmFtZV0udmFsdWUpXG4gICAgICAubWFwKChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSByZW5kZXJGdXp6eUpzb25FeHByZXNzaW9uKGxvY2Fsc1tuYW1lXS52YWx1ZSk7XG4gICAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7dmFsdWV9YDtcbiAgICAgIH0pXG4gICAgICAuam9pbihcIlxcblwiKX1cbn1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJWYXJpYWJsZSh2YXJpYWJsZTogYW55KSB7XG4gIGNvbnN0IHZhcmlhYmxlTmFtZSA9IE9iamVjdC5rZXlzKHZhcmlhYmxlKVswXTtcbiAgY29uc3QgdmFyaWFibGVBdHRyaWJ1dGVzID0gdmFyaWFibGVbdmFyaWFibGVOYW1lXTtcblxuICByZXR1cm4gYHZhcmlhYmxlIFwiJHt2YXJpYWJsZU5hbWV9XCIge1xuJHtyZW5kZXJBdHRyaWJ1dGVzKHZhcmlhYmxlQXR0cmlidXRlcyl9XG59YDtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyTW92ZWQobW92ZTogYW55KSB7XG4gIGNvbnN0IG1vdmVkQmxvY2tzID0gbW92ZS5tYXAoKG1vdmVCbG9jazogYW55KSA9PiB7XG4gICAgcmV0dXJuIGBtb3ZlZCB7XG4ke3JlbmRlckF0dHJpYnV0ZXMobW92ZUJsb2NrKX1cbn1gO1xuICB9KTtcblxuICByZXR1cm4gbW92ZWRCbG9ja3Muam9pbihcIlxcblwiKTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVySW1wb3J0KGltcG9ydHM6IGFueSkge1xuICBjb25zdCBpbXBvcnRCbG9ja3MgPSBpbXBvcnRzLm1hcCgoaW1wb3J0QmxvY2s6IGFueSkgPT4ge1xuICAgIHJldHVybiBgaW1wb3J0IHtcbiR7cmVuZGVyQXR0cmlidXRlcyhpbXBvcnRCbG9jayl9XG59YDtcbiAgfSk7XG5cbiAgcmV0dXJuIGltcG9ydEJsb2Nrcy5qb2luKFwiXFxuXCIpO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJUZXJyYWZvcm0odGVycmFmb3JtOiBhbnkpIHtcbiAgY29uc3QgYmxvY2tBdHRyaWJ1dGVzID0gW1wicmVxdWlyZWRfcHJvdmlkZXJzXCIsIFwiYmFja2VuZFwiLCBcImNsb3VkXCJdO1xuICBjb25zdCByZXF1aXJlZFByb3ZpZGVycyA9IGByZXF1aXJlZF9wcm92aWRlcnMge1xuJHtyZW5kZXJTaW1wbGVBdHRyaWJ1dGVzKHRlcnJhZm9ybS5yZXF1aXJlZF9wcm92aWRlcnMpfVxufWA7XG5cbiAgY29uc3QgYmFja2VuZHMgPSBPYmplY3Qua2V5cyh0ZXJyYWZvcm0uYmFja2VuZCB8fCB7fSkubWFwKChiYWNrZW5kTmFtZSkgPT4ge1xuICAgIHJldHVybiBgYmFja2VuZCBcIiR7YmFja2VuZE5hbWV9XCIge1xuJHtyZW5kZXJBdHRyaWJ1dGVzKHRlcnJhZm9ybS5iYWNrZW5kW2JhY2tlbmROYW1lXSl9XG59YDtcbiAgfSk7XG5cbiAgY29uc3QgY2xvdWRCYWNrZW5kID0gdGVycmFmb3JtLmNsb3VkXG4gICAgPyBgY2xvdWQge1xuJHtyZW5kZXJBdHRyaWJ1dGVzKHRlcnJhZm9ybS5jbG91ZCl9XG59YFxuICAgIDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IG90aGVyQXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKHRlcnJhZm9ybSkuZmlsdGVyKFxuICAgIChrZXkpID0+ICFibG9ja0F0dHJpYnV0ZXMuaW5jbHVkZXMoa2V5KSxcbiAgKTtcbiAgcmV0dXJuIGB0ZXJyYWZvcm0ge1xuJHtyZXF1aXJlZFByb3ZpZGVyc31cbiR7Wy4uLmJhY2tlbmRzLCBjbG91ZEJhY2tlbmRdLmpvaW4oXCJcXG5cIil9XG4ke3JlbmRlclNpbXBsZUF0dHJpYnV0ZXMob3RoZXJBdHRyaWJ1dGVzKX1cbn1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJCbG9jayhibG9jazogYW55LCBfc3RvcmFnZUNsYXNzVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGB7XG4ke3JlbmRlckF0dHJpYnV0ZXMoYmxvY2spfVxufWA7XG59XG5cbi8qKlxuICpcbiAqL1xuZnVuY3Rpb24gcmVuZGVyRnV6enlKc29uT2JqZWN0KGpzb25PYmplY3Q6IGFueSk6IHN0cmluZyB7XG4gIHJldHVybiBbXG4gICAgXCJ7XCIsXG4gICAgLi4uT2JqZWN0LmVudHJpZXMoanNvbk9iamVjdCkubWFwKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICBjb25zdCB3cmFwcGVkS2V5ID0gd3JhcElkZW50aWZpZXJJblF1b3Rlc0lmTmVlZGVkKG5hbWUpO1xuICAgICAgcmV0dXJuIGAke3dyYXBwZWRLZXl9ID0gJHtyZW5kZXJGdXp6eUpzb25FeHByZXNzaW9uKHZhbHVlKX1gO1xuICAgIH0pLFxuICAgIFwifVwiLFxuICBdLmpvaW4oXCJcXG5cIik7XG59XG4vKipcbiAqXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckZ1enp5SnNvbkV4cHJlc3Npb24oanNvbkV4cHJlc3Npb246IGFueSk6IHN0cmluZyB7XG4gIGlmIChBcnJheS5pc0FycmF5KGpzb25FeHByZXNzaW9uKSkge1xuICAgIHJldHVybiBbXG4gICAgICBcIltcIixcbiAgICAgIC4uLmpzb25FeHByZXNzaW9uLm1hcCgodmFsdWUpID0+IGAke3JlbmRlckZ1enp5SnNvbkV4cHJlc3Npb24odmFsdWUpfSxgKSxcbiAgICAgIFwiXVwiLFxuICAgIF0uam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YganNvbkV4cHJlc3Npb24gPT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gcmVuZGVyRnV6enlKc29uT2JqZWN0KGpzb25FeHByZXNzaW9uKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YganNvbkV4cHJlc3Npb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoanNvbkV4cHJlc3Npb24gPT09IFwiXCIpIHtcbiAgICAgIHJldHVybiBgXCJcImA7XG4gICAgfVxuXG4gICAgaWYgKGpzb25FeHByZXNzaW9uLmluY2x1ZGVzKFwiJHtcIikpIHtcbiAgICAgIHJldHVybiBgXCIke2pzb25FeHByZXNzaW9ufVwiYDtcbiAgICB9XG5cbiAgICBpZiAocGFyc2VJbnQoanNvbkV4cHJlc3Npb24sIDEwKS50b1N0cmluZygpID09PSBqc29uRXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGpzb25FeHByZXNzaW9uO1xuICAgIH1cblxuICAgIGlmIChqc29uRXhwcmVzc2lvbi5zdGFydHNXaXRoKFwiW1wiKSkge1xuICAgICAgcmV0dXJuIGpzb25FeHByZXNzaW9uO1xuICAgIH1cblxuICAgIGlmIChqc29uRXhwcmVzc2lvbi5zdGFydHNXaXRoKFwie1wiKSkge1xuICAgICAgcmV0dXJuIGpzb25FeHByZXNzaW9uO1xuICAgIH1cblxuICAgIGlmIChqc29uRXhwcmVzc2lvbi5zdGFydHNXaXRoKCdcIicpKSB7XG4gICAgICByZXR1cm4ganNvbkV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgcmV0dXJuIGBcIiR7ZXNjYXBlUXVvdGVzKGpzb25FeHByZXNzaW9uKX1cImA7XG4gIH1cblxuICBpZiAoanNvbkV4cHJlc3Npb24gPT09IFwidHJ1ZVwiIHx8IGpzb25FeHByZXNzaW9uID09PSBcImZhbHNlXCIpIHtcbiAgICByZXR1cm4ganNvbkV4cHJlc3Npb24gYXMgc3RyaW5nO1xuICB9XG5cbiAgaWYgKGpzb25FeHByZXNzaW9uID09PSBcIm51bGxcIikge1xuICAgIHJldHVybiBqc29uRXhwcmVzc2lvbjtcbiAgfVxuXG4gIHJldHVybiBgJHtqc29uRXhwcmVzc2lvbn1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTaW1wbGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXM6IGFueSk6IHN0cmluZyB7XG4gIGlmIChhdHRyaWJ1dGVzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKVxuICAgIC5tYXAoXG4gICAgICAoW25hbWUsIHZhbHVlXSkgPT5cbiAgICAgICAgYCAgJHtuYW1lfSA9ICR7cmVuZGVyRnV6enlKc29uRXhwcmVzc2lvbih2YWx1ZSBhcyBhbnkpfWAsXG4gICAgKVxuICAgIC5qb2luKFwiXFxuXCIpO1xufVxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyQXR0cmlidXRlcyhhdHRyaWJ1dGVzOiBhbnkpOiBzdHJpbmcge1xuICBpZiAoYXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkIHx8IGF0dHJpYnV0ZXMgPT09IG51bGwpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcylcbiAgICAubWFwKChbbmFtZSwgdl0pID0+IHtcbiAgICAgIGlmIChuYW1lID09PSBcIi8vXCIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1ldGFCbG9ja3MgPSBbXCJsaWZlY3ljbGVcIiwgXCJwcm92aXNpb25lclwiXTtcblxuICAgICAgLy9cbiAgICAgIC8vIFdlIG1pZ2h0IGhhdmUgc29tZSBhdHRyaWJ1dGVzIHRoYXQgZG9uJ3QgaGF2ZSB0eXBlIGluZm9ybWF0aW9uXG4gICAgICAvLyBqdXN0IHRyeSB0byBndWVzcyB0aGVtXG4gICAgICBpZiAodHlwZW9mIHYgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHYgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIGAke25hbWV9ID0gJHtyZW5kZXJGdXp6eUpzb25FeHByZXNzaW9uKHYpfWA7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3Z9YDtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3JlbmRlckZ1enp5SnNvbkV4cHJlc3Npb24odil9YDtcbiAgICAgIH0gZWxzZSBpZiAodiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSBudWxsYDtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgIXYuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKSAmJlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICAgICF2Lmhhc093blByb3BlcnR5KFwiZHluYW1pY1wiKVxuICAgICAgKSB7XG4gICAgICAgIGlmIChtZXRhQmxvY2tzLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGAke25hbWV9IHtcbiR7cmVuZGVyU2ltcGxlQXR0cmlidXRlcyh2KX1cbn1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7cmVuZGVyRnV6enlKc29uRXhwcmVzc2lvbih2KX1gO1xuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgLy8gUmVmZXJlbmNpbmcgYm90aCBpc0Jsb2NrIGFuZCBpc19ibG9jaywgYmVjYXVzZSBzb21ldGltZXMgd2UgcGFzcyB0aHJvdWdoIGEgc25ha2UgY2FzZSBmaWx0ZXJcbiAgICAgIC8vIHdpdGhpbiBhdHRyaWJ1dGVzLlxuICAgICAgY29uc3Qge1xuICAgICAgICBkeW5hbWljLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgaXNCbG9jayxcbiAgICAgICAgc3RvcmFnZUNsYXNzVHlwZSxcbiAgICAgICAgaXNfYmxvY2ssXG4gICAgICAgIHN0b3JhZ2VfY2xhc3NfdHlwZSxcbiAgICAgIH0gPSB2IGFzIGFueTtcbiAgICAgIGNvbnN0IGJsb2NrID0gaXNCbG9jayB8fCBpc19ibG9jayB8fCBtZXRhQmxvY2tzLmluY2x1ZGVzKG5hbWUpO1xuICAgICAgY29uc3QgY2xhc3NUeXBlID0gc3RvcmFnZUNsYXNzVHlwZSB8fCBzdG9yYWdlX2NsYXNzX3R5cGU7XG5cbiAgICAgIGlmIChkeW5hbWljKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJEeW5hbWljQmxvY2tzKHtcbiAgICAgICAgICBbbmFtZV06IGR5bmFtaWMudmFsdWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gU2hvcnQgY2lyY3VpdCB0eXBlIGNoZWNraW5nIGlmIHZhbHVlIGlzIGFuIGV4cHJlc3Npb25cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuaW5jbHVkZXMoXCIke1wiKSkge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3JlbmRlclN0cmluZyh2YWx1ZSl9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKGJsb2NrICYmIHR5cGUgIT09IFwibGlzdFwiICYmIHR5cGUgIT09IFwic2V0XCIpIHtcbiAgICAgICAgcmV0dXJuIGAke25hbWV9IHtcbiR7cmVuZGVyQXR0cmlidXRlcyh2YWx1ZSl9XG59YDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSBcImxpc3RcIiB8fCB0eXBlID09PSBcInNldFwiKSB7XG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgIHJldHVybiByZW5kZXJMaXN0KHYsIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7cmVuZGVyTGlzdCh2KX1gO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09IFwibWFwXCIpIHtcbiAgICAgICAgcmV0dXJuIGAke25hbWV9ID0gJHtyZW5kZXJNYXAodmFsdWUpfWA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSBcInNpbXBsZVwiKSB7XG4gICAgICAgIGlmIChjbGFzc1R5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3JlbmRlclN0cmluZyh2YWx1ZSl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xhc3NUeXBlID09PSBcIm51bWJlclwiIHx8IGNsYXNzVHlwZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3ZhbHVlfWA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwiYW55XCIpIHtcbiAgICAgICAgcmV0dXJuIGAke25hbWV9ID0gJHtyZW5kZXJGdXp6eUpzb25FeHByZXNzaW9uKHZhbHVlKX1gO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJyZWZlcmVuY2VcIikge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3ZhbHVlfWA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7dmFsdWV9YDtcbiAgICB9KVxuICAgIC5maWx0ZXIoKHYpID0+IHYgIT09IHVuZGVmaW5lZClcbiAgICAuam9pbihcIlxcblwiKTtcbn1cbiJdfQ==